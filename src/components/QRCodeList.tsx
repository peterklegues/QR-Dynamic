import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { QrCode, ExternalLink, Edit, Trash2, BarChart3, Copy, Eye, MoreHorizontal, Loader2 } from "lucide-react";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { useSession } from "@/integrations/supabase/auth";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";

interface QRCode {
  id: string;
  name: string;
  target_url: string;
  status: string;
  scan_count: number;
  created_at: string;
  qr_url: string; // This will be generated or a placeholder for now
  description?: string;
}

export function QRCodeList() {
  const { toast } = useToast();
  const { session, isLoading: sessionLoading } = useSession();
  const queryClient = useQueryClient();

  const { data: qrCodes, isLoading, isError, error } = useQuery<QRCode[], Error>({
    queryKey: ['qr_codes', session?.user?.id],
    queryFn: async () => {
      if (!session?.user?.id) return [];
      const { data, error } = await supabase
        .from('qr_codes')
        .select('*')
        .eq('owner_id', session.user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      // For now, let's simulate a qr_url. In a real app, this might be generated by an Edge Function or a service.
      return data.map(qr => ({
        ...qr,
        qr_url: `https://your-app-domain.com/qr/${qr.id}` // Placeholder URL
      }));
    },
    enabled: !!session?.user?.id && !sessionLoading, // Only run query if session and user ID are available
  });

  const deleteQrCodeMutation = useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('qr_codes')
        .delete()
        .eq('id', id);

      if (error) throw error;
    },
    onSuccess: () => {
      toast({
        title: "QR Code excluído!",
        description: "O QR Code foi removido com sucesso.",
      });
      queryClient.invalidateQueries({ queryKey: ['qr_codes'] });
      queryClient.invalidateQueries({ queryKey: ['qr_stats'] });
    },
    onError: (error) => {
      toast({
        title: "Erro ao excluir QR Code",
        description: error.message || "Ocorreu um erro ao tentar excluir.",
        variant: "destructive"
      });
    },
  });

  const handleCopyQRUrl = (url: string) => {
    navigator.clipboard.writeText(url);
    toast({
      title: "URL copiada!",
      description: "Link do QR Code copiado para a área de transferência",
    });
  };

  const handleEdit = (id: string) => {
    toast({
      title: "Editar QR Code",
      description: "Funcionalidade de edição será implementada em breve.",
    });
    // TODO: Implement actual edit dialog/page
  };

  const handleDelete = (id: string) => {
    if (window.confirm("Tem certeza que deseja excluir este QR Code?")) {
      deleteQrCodeMutation.mutate(id);
    }
  };

  const getStatusBadge = (status: string) => {
    return status === "Ativo" ? (
      <Badge className="bg-success/20 text-success border-success/30">Ativo</Badge>
    ) : (
      <Badge variant="secondary">Inativo</Badge>
    );
  };

  if (sessionLoading || isLoading) {
    return (
      <Card className="bg-card/30 border-dashed border-2 border-border">
        <CardContent className="flex flex-col items-center justify-center py-12">
          <Loader2 className="w-8 h-8 text-muted-foreground animate-spin mb-4" />
          <p className="text-muted-foreground">Carregando seus QR Codes...</p>
        </CardContent>
      </Card>
    );
  }

  if (isError) {
    return (
      <Card className="bg-card/30 border-dashed border-2 border-border">
        <CardContent className="flex flex-col items-center justify-center py-12">
          <Trash2 className="w-12 h-12 text-destructive mb-4" />
          <h3 className="text-lg font-semibold text-foreground mb-2">Erro ao carregar QR Codes</h3>
          <p className="text-muted-foreground text-center mb-4">
            {error?.message || "Não foi possível carregar seus QR Codes. Tente novamente mais tarde."}
          </p>
        </CardContent>
      </Card>
    );
  }

  if (!qrCodes || qrCodes.length === 0) {
    return (
      <Card className="bg-card/30 border-dashed border-2 border-border">
        <CardContent className="flex flex-col items-center justify-center py-12">
          <QrCode className="w-12 h-12 text-muted-foreground mb-4" />
          <h3 className="text-lg font-semibold text-foreground mb-2">Nenhum QR Code criado</h3>
          <p className="text-muted-foreground text-center mb-4">
            Comece criando seu primeiro QR Code dinâmico
          </p>
          <Button onClick={() => queryClient.invalidateQueries({ queryKey: ['qr_codes'] })}>
            <QrCode className="w-4 h-4 mr-2" />
            Criar Primeiro QR Code
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="grid gap-4">
      {qrCodes.map((qr) => (
        <Card key={qr.id} className="bg-card/50 border-border hover:shadow-lg transition-all duration-300">
          <CardHeader className="pb-4">
            <div className="flex items-start justify-between">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 rounded-lg bg-gradient-to-br from-primary/20 to-primary-glow/20 flex items-center justify-center">
                  <QrCode className="w-6 h-6 text-primary" />
                </div>
                <div>
                  <CardTitle className="text-lg">{qr.name}</CardTitle>
                  <CardDescription className="flex items-center gap-2 mt-1">
                    <ExternalLink className="w-3 h-3" />
                    {qr.target_url}
                  </CardDescription>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                {getStatusBadge(qr.status)}
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm">
                      <MoreHorizontal className="w-4 h-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={() => handleEdit(qr.id)}>
                      <Edit className="w-4 h-4 mr-2" />
                      Editar
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => handleCopyQRUrl(qr.qr_url)}>
                      <Copy className="w-4 h-4 mr-2" />
                      Copiar URL
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={() => window.open(qr.target_url, '_blank')}>
                      <Eye className="w-4 h-4 mr-2" />
                      Visualizar
                    </DropdownMenuItem>
                    <DropdownMenuItem 
                      onClick={() => handleDelete(qr.id)}
                      className="text-destructive"
                    >
                      <Trash2 className="w-4 h-4 mr-2" />
                      Excluir
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>
          </CardHeader>
          
          <CardContent>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-6 text-sm text-muted-foreground">
                <div className="flex items-center gap-2">
                  <BarChart3 className="w-4 h-4" />
                  {qr.scan_count} scans
                </div>
                <div>
                  Criado em {new Date(qr.created_at).toLocaleDateString('pt-BR')}
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <Button variant="outline" size="sm" onClick={() => handleEdit(qr.id)}>
                  <Edit className="w-4 h-4 mr-2" />
                  Editar
                </Button>
                <Button 
                  size="sm" 
                  onClick={() => handleCopyQRUrl(qr.qr_url)}
                  className="bg-gradient-to-r from-primary to-primary-glow"
                >
                  <Copy className="w-4 h-4 mr-2" />
                  Copiar
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}